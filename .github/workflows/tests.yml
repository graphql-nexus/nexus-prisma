on:
  workflow_call:

jobs:
  get-lts-versions:
    name: Retrieve Node.js lts versions
    runs-on: ubuntu-latest
    outputs:
      matrix_lts_versions: ${{ steps.get-lts-versions.outputs.matrix_lts_versions }}
      matrix_last_lts_version: ${{ steps.get-lts-versions.outputs.matrix_last_lts_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch Node LTS versions
        id: get-lts-versions
        run: scripts/get-lts-versions.sh

  test-latest-prisma-without-database:
    name: Test
    timeout-minutes: 40
    needs: [get-lts-versions]

    strategy:
      matrix:
        os: ['macos-latest', 'windows-latest']
        node-version: ${{ fromJson(needs.get-lts-versions.outputs.matrix_lts_versions) }}
        database: ['no-db']

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Set E2E DB Schema for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: yarn -s ts-node scripts/get-e2e-db-schema --os ${{ matrix.os }} --node-version ${{ matrix.node-version }} --github-env $env:GITHUB_ENV

      - name: Set E2E DB Schema for other operating systems
        if: ${{ matrix.os != 'windows-latest' }}
        run: yarn -s ts-node scripts/get-e2e-db-schema --os ${{ matrix.os }} --node-version ${{ matrix.node-version }} --github-env $GITHUB_ENV

      - name: Build
        run: yarn -s build

      - name: Test
        run: yarn -s test:ci
        env:
          DATABASE: ${{ matrix.database }}

  test-latest-prisma-with-database:
    name: Test
    timeout-minutes: 40
    needs: [get-lts-versions]

    strategy:
      matrix:
        os: ['ubuntu-latest']
        node-version: ${{ fromJson(needs.get-lts-versions.outputs.matrix_lts_versions) }}
        database: ['db']

    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Set E2E DB Schema for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: yarn -s ts-node scripts/get-e2e-db-schema --os ${{ matrix.os }} --node-version ${{ matrix.node-version }} --github-env $env:GITHUB_ENV

      - name: Set E2E DB Schema for other operating systems
        if: ${{ matrix.os != 'windows-latest' }}
        run: yarn -s ts-node scripts/get-e2e-db-schema --os ${{ matrix.os }} --node-version ${{ matrix.node-version }} --github-env $GITHUB_ENV

      - name: Build
        run: yarn -s build

      - name: Test
        run: yarn -s test:ci
        env:
          DATABASE: ${{ matrix.database }}

  test-bottom-versions-with-database:
    name: Test
    timeout-minutes: 40
    needs: [get-lts-versions]

    strategy:
      matrix:
        os: ['ubuntu-latest']
        node-version: ${{ fromJson(needs.get-lts-versions.outputs.matrix_last_lts_version) }}
        database: ['db']
        bottom-version: ['prisma@5.0, graphql@15.8.0', 'graphql@15.8.0']

    runs-on: ${{ matrix.os }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn --frozen-lockfile

      - name: Build
        run: yarn -s build

      - name: Set E2E DB Schema
        if: contains(matrix.bottom-version, 'prisma')
        run: yarn -s ts-node scripts/get-e2e-db-schema --os ${{ matrix.os }} --node-version ${{ matrix.node-version }} --prisma-client-version 4.0 --github-env $GITHUB_ENV

      - name: Set E2E DB Schema
        if: contains(matrix.bottom-version, 'prisma') == false
        run: yarn -s ts-node scripts/get-e2e-db-schema --os ${{ matrix.os }} --node-version ${{ matrix.node-version }} --github-env $GITHUB_ENV

      - name: Install bottom prisma dev packages
        if: contains(matrix.bottom-version, 'prisma')
        run: yarn -s add prisma@5.0 @prisma/client@5.0 @prisma/internals@5.0 --dev

      - name: Install bottom prisma packages
        if: contains(matrix.bottom-version, 'prisma')
        run: yarn -s add @prisma/generator-helper@5.0

      - name: Install bottom graphql packages
        if: contains(matrix.bottom-version, 'graphql')
        run: yarn -s add graphql@^15.8.0 nexus@1.2 --dev

      #NOTE: addresses issue "npm ERR! maxAge must be a number" due picking npm version from local semantic-release
      - name: Remove semantic-release
        run: yarn -s remove semantic-release

      - name: Test
        run: yarn -s test:ci
        env:
          DATABASE: ${{ matrix.database }}
          BOTTOM_VERSION: ${{ matrix.bottom-version }}
