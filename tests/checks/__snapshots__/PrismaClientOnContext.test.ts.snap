// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`duckType strategy: does not matter if prisma client is not importable (and therefore nor if what would be imported is not a valid prisma client instance): graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": Object {
          "id": "100",
        },
      },
    ],
  },
}
`;

exports[`duckType strategy: does not matter if prisma client is not importable (and therefore nor if what would be imported is not a valid prisma client instance): graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`duckType strategy: does not matter if prisma client is not importable (and therefore nor if what would be imported is not a valid prisma client instance): logs 1`] = `Array []`;

exports[`duckType strategy: passes if client looks like a valid prisma client instance: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": Object {
          "id": "100",
        },
      },
    ],
  },
}
`;

exports[`duckType strategy: passes if client looks like a valid prisma client instance: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`duckType strategy: passes if client looks like a valid prisma client instance: logs 1`] = `Array []`;

exports[`instanceOf strategy: If prisma client import fails then the check cannot perform its instanceof strategy and thus throws an error: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": null,
      },
    ],
  },
  "errors": Array [
    [GraphQLError: Could not perform "PrismaClientOnContext" check because there was an error while trying to import Prisma Client:

Error: Cannot find module 'does-not-exist' from 'src/generator/models/javascript.ts'],
  ],
}
`;

exports[`instanceOf strategy: If prisma client import fails then the check cannot perform its instanceof strategy and thus throws an error: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`instanceOf strategy: If prisma client import fails then the check cannot perform its instanceof strategy and thus throws an error: logs 1`] = `Array []`;

exports[`instanceOf strategy: If prisma client import succeeds but what is imported is not a valid prisma client then the check cannot perform its instanceof strategy and thus throws an error: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": null,
      },
    ],
  },
  "errors": Array [
    [GraphQLError: Could not perform "PrismaClientOnContext" check because could not get a reference to a valid Prisma Client class. Found:

{}],
  ],
}
`;

exports[`instanceOf strategy: If prisma client import succeeds but what is imported is not a valid prisma client then the check cannot perform its instanceof strategy and thus throws an error: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`instanceOf strategy: If prisma client import succeeds but what is imported is not a valid prisma client then the check cannot perform its instanceof strategy and thus throws an error: logs 1`] = `Array []`;

exports[`instanceOf strategy: passes if client is a real instance of prisma client: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": Object {
          "id": "100",
        },
      },
    ],
  },
}
`;

exports[`instanceOf strategy: passes if client is a real instance of prisma client: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`instanceOf strategy: passes if client is a real instance of prisma client: logs 1`] = `Array []`;

exports[`instanceOf strategy: throws an error if client is NOT a real instance of prisma client: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": null,
      },
    ],
  },
  "errors": Array [
    [GraphQLError: Check "PrismaClientOnContext" failed using "instanceOf" strategy. The GraphQL context.prisma value is not an instance of the Prisma Client.],
  ],
}
`;

exports[`instanceOf strategy: throws an error if client is NOT a real instance of prisma client: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`instanceOf strategy: throws an error if client is NOT a real instance of prisma client: logs 1`] = `Array []`;

exports[`instanceOf_duckType_fallback strategy: error thrown when both instanceof check and duck typing fails: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": null,
      },
    ],
  },
  "errors": Array [
    [GraphQLError: Check "PrismaClientOnContext" failed using "instanceOf_duckType_fallback" strategy. The GraphQL context.prisma value is not an instance of the Prisma Client.],
  ],
}
`;

exports[`instanceOf_duckType_fallback strategy: error thrown when both instanceof check and duck typing fails: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`instanceOf_duckType_fallback strategy: error thrown when both instanceof check and duck typing fails: logs 1`] = `Array []`;

exports[`instanceOf_duckType_fallback strategy: warning emitted when instanceof check fails but duck typing succeeds: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": Object {
          "id": "100",
        },
      },
    ],
  },
}
`;

exports[`instanceOf_duckType_fallback strategy: warning emitted when instanceof check fails but duck typing succeeds: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`instanceOf_duckType_fallback strategy: warning emitted when instanceof check fails but duck typing succeeds: logs 1`] = `
Array [
  "WARNING: Prisma Client on GraphQL context failed being checked using instanceof

REASON: The Prisma Client class reference imported from /home/debian/projects/prisma/nexus-prisma/tests/__cache__/integration/warning-emitted-when-instanceof-check-fails-but-duck-typing-succeeds/client is not the same class used by you to create your Prisma Client instance.

CONSEQUENCE: Maybe none since duck typing fallback indicates that the Prisma Client on the GraphQL context is actually valid. However relying on duck typing is hacky.

CODE: PrismaClientOnContextInstanceOfStrategyFailed",
]
`;

exports[`when check is disabled then warning NOT emitted when instanceof check fails OR duck typing fails: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "profile": null,
      },
    ],
  },
  "errors": Array [
    [GraphQLError: Cannot read properties of undefined (reading 'findUnique')],
  ],
}
`;

exports[`when check is disabled then warning NOT emitted when instanceof check fails OR duck typing fails: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  profile: Profile
}

type Profile {
  id: ID!
}
"
`;

exports[`when check is disabled then warning NOT emitted when instanceof check fails OR duck typing fails: logs 1`] = `Array []`;
