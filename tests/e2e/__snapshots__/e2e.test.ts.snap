// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When bundled custom scalars are used the project type checks and generates expected GraphQL schema: client request 1 1`] = `
Object {
  "bars": Array [
    Object {
      "foo": Object {
        "BigIntManually": null,
        "BytesManually": null,
        "DateTimeManually": null,
        "DecimalManually": null,
        "JsonManually": null,
        "someBigIntField": "9007199254740991",
        "someBytesField": Object {
          "data": Array [],
          "type": "Buffer",
        },
        "someDateTimeField": "2021-05-10T20:42:46.609Z",
        "someDecimalField": "24.454545",
        "someEnumA": "alpha",
        "someJsonField": Object {},
      },
    },
  ],
}
`;

exports[`When bundled custom scalars are used the project type checks and generates expected GraphQL schema: graphql schema 1`] = `
"### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Bar {
  foo: Foo
}

\\"\\"\\"
The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
\\"\\"\\"
scalar BigInt

\\"\\"\\"The \`Byte\` scalar type represents byte value as a Buffer\\"\\"\\"
scalar Bytes

\\"\\"\\"
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar DateTime

\\"\\"\\"An arbitrary-precision Decimal type\\"\\"\\"
scalar Decimal

type Foo {
  BigIntManually: BigInt
  BytesManually: Bytes
  DateTimeManually: DateTime
  DecimalManually: Decimal
  JsonManually: Json
  someBigIntField: BigInt!
  someBytesField: Bytes!
  someDateTimeField: DateTime!
  someDecimalField: Decimal!
  someEnumA: SomeEnumA
  someJsonField: Json!
}

\\"\\"\\"
The \`JSONObject\` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar Json @specifiedBy(url: \\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\\")

type Query {
  bars: [Bar]
}

enum SomeEnumA {
  alpha
  bravo
  charlie
}
"
`;

exports[`When bundled custom scalars are used the project type checks and generates expected GraphQL schema: nexus typegen 1`] = `
"/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as PrismaClient from \\".prisma/client\\"
import type { core } from \\"nexus\\"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // \\"BigInt\\";
    /**
     * The \`Byte\` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // \\"Bytes\\";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // \\"DateTime\\";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // \\"Decimal\\";
    /**
     * The \`JSONObject\` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // \\"Json\\";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The \`BigInt\` scalar type represents non-fractional signed whole numeric values.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // \\"BigInt\\";
    /**
     * The \`Byte\` scalar type represents byte value as a Buffer
     */
    bytes<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // \\"Bytes\\";
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // \\"DateTime\\";
    /**
     * An arbitrary-precision Decimal type
     */
    decimal<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // \\"Decimal\\";
    /**
     * The \`JSONObject\` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // \\"Json\\";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  SomeEnumA: PrismaClient.SomeEnumA
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  Bytes: any
  DateTime: any
  Decimal: any
  Json: any
}

export interface NexusGenObjects {
  Bar: PrismaClient.Bar;
  Foo: PrismaClient.Foo;
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Bar: { // field return type
    foo: NexusGenRootTypes['Foo'] | null; // Foo
  }
  Foo: { // field return type
    BigIntManually: NexusGenScalars['BigInt'] | null; // BigInt
    BytesManually: NexusGenScalars['Bytes'] | null; // Bytes
    DateTimeManually: NexusGenScalars['DateTime'] | null; // DateTime
    DecimalManually: NexusGenScalars['Decimal'] | null; // Decimal
    JsonManually: NexusGenScalars['Json'] | null; // Json
    someBigIntField: NexusGenScalars['BigInt']; // BigInt!
    someBytesField: NexusGenScalars['Bytes']; // Bytes!
    someDateTimeField: NexusGenScalars['DateTime']; // DateTime!
    someDecimalField: NexusGenScalars['Decimal']; // Decimal!
    someEnumA: NexusGenEnums['SomeEnumA'] | null; // SomeEnumA
    someJsonField: NexusGenScalars['Json']; // Json!
  }
  Query: { // field return type
    bars: Array<NexusGenRootTypes['Bar'] | null> | null; // [Bar]
  }
}

export interface NexusGenFieldTypeNames {
  Bar: { // field return type name
    foo: 'Foo'
  }
  Foo: { // field return type name
    BigIntManually: 'BigInt'
    BytesManually: 'Bytes'
    DateTimeManually: 'DateTime'
    DecimalManually: 'Decimal'
    JsonManually: 'Json'
    someBigIntField: 'BigInt'
    someBytesField: 'Bytes'
    someDateTimeField: 'DateTime'
    someDecimalField: 'Decimal'
    someEnumA: 'SomeEnumA'
    someJsonField: 'Json'
  }
  Query: { // field return type name
    bars: 'Bar'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}"
`;
