// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`can project user-to-posts relation where user has composite ID: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "id1": "user1",
        "posts": Array [
          Object {
            "id": "post1",
          },
        ],
      },
    ],
  },
}
`;

exports[`can project user-to-posts relation where user has composite ID: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id1: String!
  posts: [Post!]!
}

type Post {
  id: ID!
}
"
`;

exports[`can project user-to-posts relation where user has composite ID: logs 1`] = `Array []`;

exports[`can project user-to-posts relationship in reverse (access use via post author field). If Post.author IS optional than it IS nullable in the GraphQL API.: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "posts": Array [
      Object {
        "author": Object {
          "id": "user1",
        },
        "id": "post1",
      },
      Object {
        "author": Object {
          "id": "user1",
        },
        "id": "post2",
      },
    ],
  },
}
`;

exports[`can project user-to-posts relationship in reverse (access use via post author field). If Post.author IS optional than it IS nullable in the GraphQL API.: graphqlSchemaSDL 1`] = `
"
type Query {
  posts: [Post!]!
}

type User {
  id: ID!
}

type Post {
  id: ID!
  author: User
}
"
`;

exports[`can project user-to-posts relationship in reverse (access use via post author field). If Post.author IS optional than it IS nullable in the GraphQL API.: logs 1`] = `Array []`;

exports[`can project user-to-posts relationship in reverse (access use via post author field). If Post.author is NOT optional than it is NOT nullable in the GraphQL API.: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "posts": Array [
      Object {
        "author": Object {
          "id": "user1",
        },
        "id": "post1",
      },
      Object {
        "author": Object {
          "id": "user1",
        },
        "id": "post2",
      },
    ],
  },
}
`;

exports[`can project user-to-posts relationship in reverse (access use via post author field). If Post.author is NOT optional than it is NOT nullable in the GraphQL API.: graphqlSchemaSDL 1`] = `
"
type Query {
  posts: [Post!]!
}

type User {
  id: ID!
}

type Post {
  id: ID!
  author: User!
}
"
`;

exports[`can project user-to-posts relationship in reverse (access use via post author field). If Post.author is NOT optional than it is NOT nullable in the GraphQL API.: logs 1`] = `Array []`;

exports[`can project user-to-posts relationship: graphqlOperationExecutionResult 1`] = `
Object {
  "data": Object {
    "users": Array [
      Object {
        "id": "user1",
        "posts": Array [
          Object {
            "id": "post1",
          },
          Object {
            "id": "post2",
          },
        ],
      },
    ],
  },
}
`;

exports[`can project user-to-posts relationship: graphqlSchemaSDL 1`] = `
"
type Query {
  users: [User!]!
}

type User {
  id: ID!
  posts: [Post!]!
}

type Post {
  id: ID!
}
"
`;

exports[`can project user-to-posts relationship: logs 1`] = `Array []`;
