// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`When a model field has a documentation comment, then it is used for the JSDoc of that field and its $description field 1`] = `
"import * as Nexus from 'nexus'
import * as NexusCore from 'nexus/dist/core'

//
// Types
//

declare namespace $Types {
  // Models

  /**
   * ### ðŸ“” Missing Model Documentation for \`SomeModel\`
   * 
   * Get JSDoc documentation for this model automatically by documenting
   * it in your Prisma Schema âœ¨!
   * 
   * To document a model add a tripple slash comment above it.
   * 
   * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
   * 
   * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
   * 
   * \`\`\`prisma
   * /// Lorem ipsum dolor sit amet...
   * model SomeModel {
   *   id  String  @id
   * }
   * \`\`\`
   * 
   * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
   * 
   * \`\`\`prisma
   * /// A user record. A user maps 1:1 with a person. Not
   * /// to be confused with an \`Account\` which on person
   * /// may have multiple of, all linked to a single \`User\`.
   * model User {
   *   id  String  @id
   * }
   * \`\`\`
   */
  interface SomeModel {
    $name: 'SomeModel'
    $description: null
    /**
     * Some documentation
     */
    id: {
      /**
       * The name of this field.
       */
      name: 'id'
    
      /**
       * The type of this field.
       */
      type: NexusCore.NexusNonNullDef<'ID'>
    
      /**
       * The documentation of this field.
       */
      description: string
    }
  }

  // Enums

  // N/A â€“â€“ You have no defined any enums in your Prisma schema file.
}


//
// Exports
//

// Models

/**
 * ### ðŸ“” Missing Model Documentation for \`SomeModel\`
 * 
 * Get JSDoc documentation for this model automatically by documenting
 * it in your Prisma Schema âœ¨!
 * 
 * To document a model add a tripple slash comment above it.
 * 
 * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
 * 
 * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
 * 
 * \`\`\`prisma
 * /// Lorem ipsum dolor sit amet...
 * model SomeModel {
 *   id  String  @id
 * }
 * \`\`\`
 * 
 * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
 * 
 * \`\`\`prisma
 * /// A user record. A user maps 1:1 with a person. Not
 * /// to be confused with an \`Account\` which on person
 * /// may have multiple of, all linked to a single \`User\`.
 * model User {
 *   id  String  @id
 * }
 * \`\`\`
 */
export const SomeModel: $Types.SomeModel

// Enums"
`;

exports[`When a model field has no documentation comment, then it gets the default JSDoc and its description field is null 1`] = `
"import * as Nexus from 'nexus'
import * as NexusCore from 'nexus/dist/core'

//
// Types
//

declare namespace $Types {
  // Models

  /**
   * ### ðŸ“” Missing Model Documentation for \`SomeModel\`
   * 
   * Get JSDoc documentation for this model automatically by documenting
   * it in your Prisma Schema âœ¨!
   * 
   * To document a model add a tripple slash comment above it.
   * 
   * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
   * 
   * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
   * 
   * \`\`\`prisma
   * /// Lorem ipsum dolor sit amet...
   * model SomeModel {
   *   id  String  @id
   * }
   * \`\`\`
   * 
   * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
   * 
   * \`\`\`prisma
   * /// A user record. A user maps 1:1 with a person. Not
   * /// to be confused with an \`Account\` which on person
   * /// may have multiple of, all linked to a single \`User\`.
   * model User {
   *   id  String  @id
   * }
   * \`\`\`
   */
  interface SomeModel {
    $name: 'SomeModel'
    $description: null
    /**
     * ### ðŸ“” Missing Field Documentation for \`id\`
     * 
     * Get JSDoc documentation for this field automatically by documenting
     * it in your Prisma Schema âœ¨!
     * 
     * To document a field add a tripple slash comment above it.
     * 
     * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
     * 
     * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
     * 
     * \`\`\`prisma
     * model SomeModel {
     *   /// Lorem ipsum dolor sit amet.
     *   id  String
     * }
     * \`\`\`
     * 
     * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
     * 
     * \`\`\`prisma
     * model User {
     *   /// Identifier for a user. Will never change once set.
     *   /// More stable than the \`handle\` field  which user
     *   /// _can_ change, but is not human-friendly. Prefer this
     *   /// for machine consumers but prefer \`handle\` for human
     *   /// visible things like URL slugs.
     *   id  String  @id
     * }
     * \`\`\`
     */
    id: {
      /**
       * The name of this field.
       */
      name: 'id'
    
      /**
       * The type of this field.
       */
      type: NexusCore.NexusNonNullDef<'ID'>
    
      /**
       * The documentation of this field.
       */
      description: undefined
    }
  }

  // Enums

  // N/A â€“â€“ You have no defined any enums in your Prisma schema file.
}


//
// Exports
//

// Models

/**
 * ### ðŸ“” Missing Model Documentation for \`SomeModel\`
 * 
 * Get JSDoc documentation for this model automatically by documenting
 * it in your Prisma Schema âœ¨!
 * 
 * To document a model add a tripple slash comment above it.
 * 
 * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
 * 
 * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
 * 
 * \`\`\`prisma
 * /// Lorem ipsum dolor sit amet...
 * model SomeModel {
 *   id  String  @id
 * }
 * \`\`\`
 * 
 * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
 * 
 * \`\`\`prisma
 * /// A user record. A user maps 1:1 with a person. Not
 * /// to be confused with an \`Account\` which on person
 * /// may have multiple of, all linked to a single \`User\`.
 * model User {
 *   id  String  @id
 * }
 * \`\`\`
 */
export const SomeModel: $Types.SomeModel

// Enums"
`;

exports[`When a model has a documentation comment, then it is used for the JSDoc of that model and its $description field 1`] = `
"import * as Nexus from 'nexus'
import * as NexusCore from 'nexus/dist/core'

//
// Types
//

declare namespace $Types {
  // Models

  /**
   * Some documentation
   */
  interface SomeModel {
    $name: 'SomeModel'
    $description: 'Some documentation'
    /**
     * ### ðŸ“” Missing Field Documentation for \`id\`
     * 
     * Get JSDoc documentation for this field automatically by documenting
     * it in your Prisma Schema âœ¨!
     * 
     * To document a field add a tripple slash comment above it.
     * 
     * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
     * 
     * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
     * 
     * \`\`\`prisma
     * model SomeModel {
     *   /// Lorem ipsum dolor sit amet.
     *   id  String
     * }
     * \`\`\`
     * 
     * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
     * 
     * \`\`\`prisma
     * model User {
     *   /// Identifier for a user. Will never change once set.
     *   /// More stable than the \`handle\` field  which user
     *   /// _can_ change, but is not human-friendly. Prefer this
     *   /// for machine consumers but prefer \`handle\` for human
     *   /// visible things like URL slugs.
     *   id  String  @id
     * }
     * \`\`\`
     */
    id: {
      /**
       * The name of this field.
       */
      name: 'id'
    
      /**
       * The type of this field.
       */
      type: NexusCore.NexusNonNullDef<'ID'>
    
      /**
       * The documentation of this field.
       */
      description: undefined
    }
  }

  // Enums

  // N/A â€“â€“ You have no defined any enums in your Prisma schema file.
}


//
// Exports
//

// Models

/**
 * Some documentation
 */
export const SomeModel: $Types.SomeModel

// Enums"
`;

exports[`When a model has no documentation comment, then it gets the default JSDoc and its description field is null 1`] = `
"import * as Nexus from 'nexus'
import * as NexusCore from 'nexus/dist/core'

//
// Types
//

declare namespace $Types {
  // Models

  /**
   * ### ðŸ“” Missing Model Documentation for \`SomeModel\`
   * 
   * Get JSDoc documentation for this model automatically by documenting
   * it in your Prisma Schema âœ¨!
   * 
   * To document a model add a tripple slash comment above it.
   * 
   * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
   * 
   * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
   * 
   * \`\`\`prisma
   * /// Lorem ipsum dolor sit amet...
   * model SomeModel {
   *   id  String  @id
   * }
   * \`\`\`
   * 
   * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
   * 
   * \`\`\`prisma
   * /// A user record. A user maps 1:1 with a person. Not
   * /// to be confused with an \`Account\` which on person
   * /// may have multiple of, all linked to a single \`User\`.
   * model User {
   *   id  String  @id
   * }
   * \`\`\`
   */
  interface SomeModel {
    $name: 'SomeModel'
    $description: null
    /**
     * ### ðŸ“” Missing Field Documentation for \`id\`
     * 
     * Get JSDoc documentation for this field automatically by documenting
     * it in your Prisma Schema âœ¨!
     * 
     * To document a field add a tripple slash comment above it.
     * 
     * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
     * 
     * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
     * 
     * \`\`\`prisma
     * model SomeModel {
     *   /// Lorem ipsum dolor sit amet.
     *   id  String
     * }
     * \`\`\`
     * 
     * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
     * 
     * \`\`\`prisma
     * model User {
     *   /// Identifier for a user. Will never change once set.
     *   /// More stable than the \`handle\` field  which user
     *   /// _can_ change, but is not human-friendly. Prefer this
     *   /// for machine consumers but prefer \`handle\` for human
     *   /// visible things like URL slugs.
     *   id  String  @id
     * }
     * \`\`\`
     */
    id: {
      /**
       * The name of this field.
       */
      name: 'id'
    
      /**
       * The type of this field.
       */
      type: NexusCore.NexusNonNullDef<'ID'>
    
      /**
       * The documentation of this field.
       */
      description: undefined
    }
  }

  // Enums

  // N/A â€“â€“ You have no defined any enums in your Prisma schema file.
}


//
// Exports
//

// Models

/**
 * ### ðŸ“” Missing Model Documentation for \`SomeModel\`
 * 
 * Get JSDoc documentation for this model automatically by documenting
 * it in your Prisma Schema âœ¨!
 * 
 * To document a model add a tripple slash comment above it.
 * 
 * Learn more about Prisma Schema comments [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
 * 
 * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 1 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
 * 
 * \`\`\`prisma
 * /// Lorem ipsum dolor sit amet...
 * model SomeModel {
 *   id  String  @id
 * }
 * \`\`\`
 * 
 * #### â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“ Example 2 â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“â€“
 * 
 * \`\`\`prisma
 * /// A user record. A user maps 1:1 with a person. Not
 * /// to be confused with an \`Account\` which on person
 * /// may have multiple of, all linked to a single \`User\`.
 * model User {
 *   id  String  @id
 * }
 * \`\`\`
 */
export const SomeModel: $Types.SomeModel

// Enums"
`;
