// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`A model field with type BigInt maps to GraphQL BigInt custom scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  BigInt
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'BigInt' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'BigInt' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'BigInt\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'BigInt\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type Boolean maps to GraphQL Boolean scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  Boolean
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'Boolean' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'Boolean' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'Boolean\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'Boolean\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type Bytes maps to GraphQL Bytes custom scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  Bytes
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'Bytes' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'Bytes' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'Bytes\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'Bytes\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type DateTime maps to GraphQL DateTime custom scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  DateTime
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'DateTime' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'DateTime' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'DateTime\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'DateTime\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type Float maps to GraphQL Float scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  Float
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'Float' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'Float' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'Float\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'Float\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type Int maps to GraphQL Int scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  Int
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'Int' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'Int' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'Int\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'Int\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type Int, attribute @id, maps to GraphQL Int scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  Int
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'Int' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'Int' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'Int\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'Int\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type Json maps to GraphQL Json custom scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.foo\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   foo  Json
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.foo)
    *   }
    * })
    */
  foo: {
    /**
     * The name of this field.
     */
    name: 'foo'
  
    /**
     * The type of this field.
     */
    type: 'Json' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'Json' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'Json\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'Json\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'foo'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;

exports[`A model field with type String, attribute @id, maps to GraphQL ID scalar: index.d.ts 1`] = `
"import * as NexusCore from 'nexus/dist/core'

//
//
// TYPES
// TYPES
// TYPES
// TYPES
//
//

// Models

/**
  * Generated Nexus \`objectType\` configuration based on your Prisma schema's model \`SomeModel\`.
  *
  * ### ️⚠️ You have not writen documentation for model SomeModel
  *
  * Replace this default advisory JSDoc with your own documentation about model SomeModel
  * by documenting it in your Prisma schema. For example:
  *
  * \`\`\`prisma
  * /// Lorem ipsum dolor sit amet...
  * model SomeModel {
  *   foo  String
  * }
  * \`\`\`
  *
  * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
  *
  * @example
  *
  * import { objectType } from 'nexus'
  * import { SomeModel } from 'nexus-prisma'
  *
  * objectType({
  *   name: SomeModel.$name
  *   description: SomeModel.$description
  *   definition(t) {
  *     t.field(SomeModel.id)
  *   }
  * })
  */
export interface SomeModel {
  $name: 'SomeModel'
  $description: undefined
  /**
    * Generated Nexus \`t.field\` configuration based on your Prisma schema's model-field \`SomeModel.id\`.
    *
    * ### ️⚠️ You have not writen documentation for model SomeModel
    *
    * Replace this default advisory JSDoc with your own documentation about model SomeModel
    * by documenting it in your Prisma schema. For example:
    * \`\`\`prisma
    * model SomeModel {
    *   /// Lorem ipsum dolor sit amet.
    *   id  String
    * }
    * \`\`\`
    *
    * Learn more about documentation comments in Prisma schema files [here](https://www.prisma.io/docs/concepts/components/prisma-schema#comments).
    *
    * @example
    *
    * import { objectType } from 'nexus'
    * import { SomeModel } from 'nexus-prisma'
    *
    * objectType({
    *   name: SomeModel.$name
    *   description: SomeModel.$description
    *   definition(t) {
    *     t.field(SomeModel.id)
    *   }
    * })
    */
  id: {
    /**
     * The name of this field.
     */
    name: 'id'
  
    /**
     * The type of this field.
     */
    type: 'ID' extends NexusCore.GetGen<'allNamedTypes', string>
    ? NexusCore.NexusNonNullDef<'ID' & NexusCore.GetGen<'allNamedTypes', string>>
    : 'Warning/Error: The type \\'ID\\' is not amoung the union of GetGen<\\'allNamedTypes\\', string>. This means that either: 1) You need to run nexus typegen reflection. 2) You need to add the type \\'ID\\' to your GraphQL API.'
  
    /**
     * The documentation of this field.
     */
    description: undefined
  
    /**
     * The resolver of this field
     */
    resolve: NexusCore.FieldResolver<'SomeModel', 'id'>
  }
}

// Enums

// N/A –– You have not defined any enums in your Prisma schema file.


//
//
// TERMS
// TERMS
// TERMS
// TERMS
//
//

//
//
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
// EXPORTS: PRISMA MODELS
//
//

export const SomeModel: SomeModel

//
//
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
// EXPORTS: PRISMA ENUMS
//
//

// N/A –– You have not defined any enums in your Prisma schema file.

//
//
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
// EXPORTS: OTHER
//
//

import type { Settings } from 'nexus-prisma/dist-cjs/generator/Settings/index'

/**
 * Adjust Nexus Prisma's [runtime settings](https://pris.ly/nexus-prisma/docs/settings/runtime).
 *
 * @example
 *
 *     import { PrismaClient } from '@prisma/client'
 *     import { ApolloServer } from 'apollo-server'
 *     import { makeSchema } from 'nexus'
 *     import { User, Post, $settings } from 'nexus-prisma'
 *
 *     new ApolloServer({
 *       schema: makeSchema({
 *         types: [],
 *       }),
 *       context() {
 *         return {
 *           db: new PrismaClient(), // <-- You put Prisma client on the "db" context property
 *         }
 *       },
 *     })
 *
 *     $settings({
 *       prismaClientContextField: 'db', // <-- Tell Nexus Prisma
 *     })
 *
 * @remarks This is _different_ than Nexus Prisma's [_gentime_ settings](https://pris.ly/nexus-prisma/docs/settings/gentime).
 */
export const $settings: Settings.Runtime.Manager['change']
"
`;
